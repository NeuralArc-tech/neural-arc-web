name: ðŸ¤– Gemini Issue Assistant

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  assist:
    runs-on: ubuntu-latest
    if: >
      contains(github.event.comment.body, '@gemini') &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.event.comment.author_association == 'COLLABORATOR')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract command
        id: extract-command
        run: |
          comment_body="${{ github.event.comment.body }}"
          
          # Extract everything after @gemini
          if [[ "$comment_body" =~ @gemini[[:space:]]+(.+) ]]; then
            command="${BASH_REMATCH[1]}"
            echo "command=$command" >> $GITHUB_OUTPUT
            echo "has_command=true" >> $GITHUB_OUTPUT
          else
            echo "has_command=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Gemini Assistant
        if: steps.extract-command.outputs.has_command == 'true'
        uses: google-gemini/gemini-cli-action@v1
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMAND: ${{ steps.extract-command.outputs.command }}
          COMMENTER: ${{ github.event.comment.user.login }}
        run: |
          echo "Processing command: ${{ steps.extract-command.outputs.command }}"
          
          # Get issue context
          issue_info=$(gh issue view ${{ github.event.issue.number }} --json title,body,labels,assignees)
          issue_title=$(echo $issue_info | jq -r .title)
          issue_body=$(echo $issue_info | jq -r .body)
          issue_labels=$(echo $issue_info | jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')
          
          # Use Gemini CLI to process the command
          gemini-cli "You are a GitHub issue assistant for a React.js website project called Neural Arc.
          
          **Context:**
          - Issue #${{ github.event.issue.number }}: $issue_title
          - Labels: $issue_labels
          - Issue Description: $issue_body
          - Command from ${{ github.event.comment.user.login }}: ${{ steps.extract-command.outputs.command }}
          
          **Project Info:**
          This is a React.js website for Neural Arc, featuring:
          - 3D animations with Three.js
          - Product showcase pages
          - Modern UI with particle effects
          - Responsive design
          
          Please respond to the command in the context of this issue. If the command is:
          - '/analyze' - Provide detailed analysis of the issue
          - '/suggest' - Suggest solutions or next steps
          - '/estimate' - Provide time/complexity estimation
          - '/help' - Explain how to work on this issue
          - Other commands - Interpret and respond appropriately
          
          Keep responses concise and actionable. Format as GitHub markdown." > response.txt
          
          # Post response as comment
          gh issue comment ${{ github.event.issue.number }} --body-file response.txt