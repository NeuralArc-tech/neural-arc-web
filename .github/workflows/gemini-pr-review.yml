name: 🔍 Gemini PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.issue.number }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@gemini') &&
       contains(github.event.comment.body, '/review') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR details
        id: pr-details
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "base_sha=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
            echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            # Get PR details from issue number
            pr_data=$(gh pr view ${{ github.event.issue.number }} --json baseRefOid,headRefOid)
            echo "base_sha=$(echo $pr_data | jq -r .baseRefOid)" >> $GITHUB_OUTPUT
            echo "head_sha=$(echo $pr_data | jq -r .headRefOid)" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Gemini PR Review
        uses: google-gemini/gemini-cli-action@v1
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
        env:
          PR_NUMBER: ${{ steps.pr-details.outputs.pr_number }}
          BASE_SHA: ${{ steps.pr-details.outputs.base_sha }}
          HEAD_SHA: ${{ steps.pr-details.outputs.head_sha }}
        run: |
          echo "Reviewing PR #${{ steps.pr-details.outputs.pr_number }}"
          
          # Get the diff for the PR
          git diff ${{ steps.pr-details.outputs.base_sha }}..${{ steps.pr-details.outputs.head_sha }} > pr_diff.txt
          
          # Get PR information
          pr_info=$(gh pr view ${{ steps.pr-details.outputs.pr_number }} --json title,body,author)
          pr_title=$(echo $pr_info | jq -r .title)
          pr_body=$(echo $pr_info | jq -r .body)
          pr_author=$(echo $pr_info | jq -r .author.login)
          
          # Use Gemini CLI to review the PR
          gemini-cli "Please review this pull request for a React.js website project:
          
          **PR Title:** $pr_title
          **Author:** $pr_author
          **Description:** $pr_body
          
          **Changes:**
          $(cat pr_diff.txt)
          
          Please provide a comprehensive code review focusing on:
          1. Code quality and best practices
          2. React.js specific patterns and performance
          3. Security considerations
          4. Potential bugs or issues
          5. Suggestions for improvements
          
          Format your response as a GitHub PR review comment." > review_output.txt
          
          # Post the review as a comment
          gh pr comment ${{ steps.pr-details.outputs.pr_number }} --body-file review_output.txt